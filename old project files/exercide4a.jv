  pipeline exercise4pipeline {

      // For exercise4pipeline's blocks build a chain
  ExtractWeather
  -> InterprateZipFile
  -> WeatherFilePick
  -> InterprateText
  -> InterprateWeatherCSV
  -> DataSelectorColumn
  -> ColumnDeleter
  -> InterprateWeatherTable
  -> TransformerTemperature
  -> TransformBatteryTemperature
  -> LoadWeather;

  // Fetch weather database from a provided URL
  block ExtractWeather oftype HttpExtractor {
    url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
  }

  // Download the zip file and interpret the file
  block InterprateZipFile oftype ArchiveInterpreter {
    archiveType: "zip";
  }

  // Take the csv file from the specific folder
  block WeatherFilePick oftype FilePicker {
    path: "/data.csv";
  }

  // Use semi clone as data seperator in the csv file
  block InterprateWeatherCSV oftype CSVInterpreter {
    delimiter: ';';
  }

  // Plain text file Interprets
  block InterprateText oftype TextFileInterpreter {}

  // Some columne Deletes table
  block ColumnDeleter oftype ColumnDeleter {
    delete: [
    column F, 
    column G, 
    column H, 
    column I
    ];
  }

  // Select some specific cells from the table
  block DataSelectorColumn oftype CellRangeSelector {
    select: range A1:K*;
  }

  // Apply data validation for the existing columns
    constraint PositiveRange oftype RangeConstraint { lowerBound: 0; lowerBoundInclusive: false;}
    valuetype PositiveInteger oftype integer { constraints: [ PositiveRange ]; }

    // Convert the Temp sheet to table & drop some columns
  block InterprateWeatherTable oftype TableInterpreter {
    header: false;
    columns: [
      "id" oftype PositiveInteger,
      "producer" oftype text,
      "model" oftype text,
      "month" oftype integer,
      "temperature" oftype decimal,
      "battery_temperature" oftype decimal
    ];
  }
  
  // Applies the temperature conversion transformation to the 'Batterietemperatur' column
  block TransformBatteryTemperature oftype TableTransformer {
    inputColumns: ['battery_temperature'];
    outputColumn: 'battery_temperature';
    use: TempConvert;  // Using the defined transformation
  }

  // Transformation definition to convert Celsius to Fahrenheit
  transform TempConvert {
    from tempCelsius oftype decimal;
    to tempFahrenheit oftype decimal;

 // Impliment the formula
    tempFahrenheit: (tempCelsius * 9/5) + 32;
  }

  // Applies the temperature conversion transformation to the 'Temperatur' column
  block TransformerTemperature oftype TableTransformer {
    inputColumns: ['temperature'];
    outputColumn: 'temperature';
    use: TempConvert;  // Using the defined transformation
  }


  // Loads the processed data into an SQLite table
  block LoadWeather oftype SQLiteLoader {
    table: "temperatures";
    file: "./temperatures.sqlite";
    dropTable: false;
  }

}