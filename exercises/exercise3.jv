pipeline Exercise3Pipeline {

    // Build a chain of all the ProductPipeline's blocks
    ProductDownloader
        -> ProductTextFileInterpreter
        -> ProductTextRangeSelector
        -> ProductCSVInterpreter
        -> ProductCellWriter_AtoE
        -> ProductCellWriter_ATtoAU
        -> ProductTableInterpreter
        -> ProductUppercaseJanuar
        -> ProductUppercaseFebruar
        -> ProductLoader;

    // Downloads the CSV file containing product data from the specified URL (In: None, Out: File)
    block ProductDownloader oftype HttpExtractor {
        url: "https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
    }

    // Interprets the downloaded product file as a text file with specified encoding (In: File, Out: TextFile)
    block ProductTextFileInterpreter oftype TextFileInterpreter { encoding: "latin2"; }

    // Selects a specific range of lines from the text file, ignoring metadata (In: TextFile, Out: TextFile)
    block ProductTextRangeSelector oftype TextRangeSelector { lineFrom: 8; lineTo: 41336; }

    // Converts the text file into a sheet format, specifying the delimiter (In: TextFile, Out: Sheet)
    block ProductCSVInterpreter oftype CSVInterpreter { delimiter: ";"; }

    // Renames necessary columns in the sheet (In: Sheet, Out: Sheet)
    block ProductCellWriter_AtoE oftype CellWriter { at: range A1:E1; write: ["year", "month", "product_id", "product_name", "product_source"]; }
    block ProductCellWriter_ATtoAU oftype CellWriter { at: range AT1:AU1; write: ["abroad", "total"]; }

    // Data validation for numeric columns
    constraint PositiveRange oftype RangeConstraint { lowerBound: 0; lowerBoundInclusive: false;}
    valuetype PositiveInteger oftype integer { constraints: [ PositiveRange ]; }

    // Data validation for ID format
    constraint ValidIdFormat oftype RegexConstraint {
        regex: /^NST7-[A-Z0-9]{3}$/;
    }

    valuetype ValidId oftype text { constraints: [ValidIdFormat,]; }

    // Data validation for month format
    constraint ValidMonthFormat oftype RegexConstraint {
        regex: /\b(Januar|Februar|MÃ¤rz|April|Mai|Juni|Juli|August|September|Oktober|November|Dezember)\b/;
    }

    valuetype ValidMonth oftype text { constraints: [ValidMonthFormat,]; }

    // Transformation to convert "Februar" to uppercase
    transform UppercaseFebruar
    {
        from inputName oftype text;
        to outputName oftype text;
        outputName: inputName replace /Februar/ with 'FEBRUAR';
    }
    block ProductUppercaseFebruar oftype TableTransformer
    {
        inputColumns: ['month'];
        outputColumn: 'month';
        use: UppercaseFebruar;
    }
    // Transformation to convert "Januar" to uppercase
    transform UppercaseJanuar 
    {
        from inputName oftype text;
        to outputName oftype text;
        outputName: inputName replace /Januar/ with 'JANUAR' ;
    }
    block ProductUppercaseJanuar oftype TableTransformer
    {
        inputColumns: ['month'];
        outputColumn: 'month';
        use: UppercaseJanuar;
    }


    // Converts the sheet into a table format and drops unnecessary columns (In: Sheet, Out: Table)
    block ProductTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "year" oftype PositiveInteger,
            "month" oftype ValidMonth,
            "product_id" oftype ValidId,
            "product_name" oftype text,
            "product_source" oftype text,
            "abroad" oftype PositiveInteger,
            "total" oftype PositiveInteger,
        ];
    }

    // Loads the processed data into an SQLite database (In: Table, Out: None)
    block ProductLoader oftype SQLiteLoader {
        table: "goods";
        file: "./goodsTransportedByTrain.sqlite";
    }

}
